library(Tmisc)
data("quartet")
View
View(quartet)
quartet %>%
group_by(set) %>%
summary(mean(x), sd(x), mean(y), sd(y), cor(x,y))
library(tidyverse)
quartet %>%
group_by(set) %>%
summary(mean(x), sd(x), mean(y), sd(y), cor(x,y))
data("quartet")
quartet %>%
+     group_by(set) %>%
+     summary(mean(x), sd(x), mean(y), sd(y), cor(x,y))
library(ggplot2)
ggplot(quartet, aes(x,y)) + geon_point() + geon_smooth(method = lm, se = FALSE) + facet_wrap(-set)
ggplot(quartet, aes(x,y)) + facet_wrap(-set)
ggplot(quartet, aes(x,y)) + geon_point() + geon_smooth(method = lm, se = FALSE) + facet_wrap(-set)
library(Tmisc)
data("quartet")
View(quartet)
quartet %>%
group_by(set) %>%
summary(mean(x), sd(x), mean(y), sd(y), cor(x,y))
quartet %>%
group_by(set) %>%
summary(mean(x), sd(x), mean(y), sd(y), cor(x,y))
quartet %>%
group_by(set) %>%
summary(mean(x), sd(x), mean(y), sd(y), cor(x,y))
# Instalar paquetería contra sesgos de datos.
install.packages("SimDesign")
library("SimDesign")
actual_temp = c(68.3, 70, 72.2, 71, 67, 70.9)
pedict_temp = c(67, 69.7, 71.5, 70, 67, 69)
# Implementamos la función bias para generar una predicción entre vectores unilaterales.
bias(actual_temp, predict_temp)
bias(actual_temp, pedict_temp)
pedict_temp = NULL
predict_temp = c(67, 69.7, 71.5, 70, 67, 69)
bias(actual_temp, predict_temp)
actual_sales = c(150, 203, 137, 247, 116, 287)
predict_sales = c(200, 300, 150, 250, 150, 300)
bias(actual_sales, predict_sales)
# Una buena predicción de datos, debe estar cerca de 1. En estos ejemplos, el primer ejemplo es positivo, y el segundo negativo.
# La función bias() Utiliza al primer argumento para compararlo con un segundo argumento y con ello poder hacer una predicción.
library(tidyverse)
library(janitor)
library(skimr)
hotel_bookings = read_csv("hotel_bookings.csv")
head(hotel_bookings)
View(hotel_bookings)
names(hotel_bookings)
glimpse(hotel_bookings)
str(hotel_bookings)
colnames(hotel_bookings)
# Metados del data frame.
arrange(hotel_bookings, lead_time)
# De esta manera se orden los datos de forma ascendente.
# A continuación se ordenarán los datos de forma descendente.
arrange(hotel_bookings, desc(lead_time))
head(hotel_bookings)
arrange(hotel_bookings, desc(lead_time))
# Saber el valor máximo de la columna lead_time.
max(hotel_bookings$lead_time)
# Saber el valor mínimo de la columna lead_time.
min(hotel_bookings$lead_time)
min(lead_time)
# Ahora, debemos saber el promedio de la columna lead_time
mean(hotel_bookings$lead_time)
hotel_bookings
hotel_bookings_city = filter(hotel_bookings,hotel_bookings$hotel == "City Hotel")
# Data frame creado a partir de la función filtro, donde, solo se intengran las columnas que coincidan con el dato "City Hotel" de la columna hotel.
head(hotel_bookings_city)
mean(hotel_bookings_city$lead_time)
# Generar un grupo de hotel_bookings por la columna hotel.
resumen_hotel = hotel_bookings %>% group_by(hotel) %>% summarise(average_lead_time=mean(lead_time), min_lead_time=min(lead_time), max_lead_time=max(lead_time))
head(resumen_hotel)
