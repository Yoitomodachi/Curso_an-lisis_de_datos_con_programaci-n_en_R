install.packages("tidyverse")
library(tidyverse)
library(lubridate)
# Este es un comentario en R de una lìnea
# LO siguiente es una impresiòn.
print("Còdigo en R")
?print()
# Lo de arriba es el comando de ayuda para saber la funciòn de un comando.
# Esta es una variable.
variable1 = 15
# Esta tàmbien es una variable.
variable2 <- "Hola"
# Lo siguiente serà un vector.
vec_1 = c(79, 10.5, 85, 5.55)
# El vector puede ser impreso con solo nombrarlo.
vec_1
# La siguiente variable es un vector número de tipo entero.
vector1 = (10, 5, -9, -258)
vector1 <- (10, 5, -9, -258)
vector1 <- (10, 5, 9, 258)
vector1 = e(10, 5, -9, -258)
vector1 = c(10, 5, -9, -258)
# De otra manera definida un vector númerico entero.
vector2 = c(1L, 56L, -128L, -15L)
# Vector atómico boléano.
vector3 = c(TRUE, FALSE, TRUE, FALSE)
# Vector atómico de tipo carácter.
vector4 = c("HOla", "P", "a", "Roberto")
vector5 = c("HOla", "Pppp", "aAAA", "Roberto")
# Saber el tipo de dato que maneja el vector.
typeof(vector2)
typeof(vector3)
typeof(vector1)
# Saber la cantidad de elementos que hay en un vector.
length(vector1)
length(vector5)
# Verificar el tipo de un vector mediante la instrucción is.
is.atomic(vector3)
is.atomic(vector1)
is.atomic(vector2)
is.character(vector2)
is.character(vector5)
is.logical(vector5)
is.logical(vector3)
is.integer(vector3)
is.integer(vector2)
# Nombrar un vector mediante el método name.
names(numeros) = c(12, 5, -5, -9)
numeros = c(12, 5, -5, -9)
name(numeros) = c("a", "b", "c")
names(numeros) = c("a", "b", "c")
print(numeros)
# De esta manera se pude generar un tipo de diccionario entre vectores.
prueba = c(58L, 89L, "HOla", FALSE)
print(prueba)
# Error lógico, en donde, ocurre un casting debido a que no hay soporte entre vectores que convinen varios tipos de datos.
# Creación de lista, para soportar varios tipos de datos en una misma colección.
primer_lista = list("a", TRUE, 12L, 0.5)
print(primer_lista)
typeof(primer_lista)
# Generar una lista multidimensinal.
matriz = list(list(list(1, 3.3, "H")))
print(matriz)
typeof(matriz)
# Determinar una estructura de datos en una lista.
str(list("a", 1L, 1.5, TRUE))
cadenas = str(list("a", 1L, 1.5, TRUE))
print(cadenas)
# Esto imprime cada tipo de dato por elemento en la lista.
# Determinación de una estructura de datos en una matriz.
z <- list(list(list(1 , 3, 5)))
str(z)
str(Z)
# Nombrar a los elementos en una lista.
ciudades = list('Chicago' = 1, 'New York' = 2, 'Los Angeles' = 3)
print(ciudades)
library(tidyverse)
library(lubridate)
# Trabajar fechas y horas con R
# Definir una fecha.
fecha = "2024-02-14"
# Definir una hora.
hora = "20:11:59 UTC"
# Fecha con hora.
tiempos = "2024-02-14 20:11:59 UTC"
typeof(fecha)
typeof(tiempos)
# Saber la fecha de hoy.
date()
today()
now()
# Tiempo exacto con el comando now()
ymd("2021-01-20")
Convertir un string en date / fecha
# Convertir un string en date / fecha
ymd(fecha)
typeof(fecha)
mdy("January 20th, 2021")
# Casting de mes, día, año en formato americano, para date.
dmy("20-Jan-2021")
# EL primer caso es mes, día, año. El segundo caso es: día, mes, año. En ambos casos, se genera un casting de tipo date, para que R pueda trabajar este dato.
# Lo siguiente es una conversión año, mes, día con un csting al principio númerico.
ymd(20210120)
ymd_hms("2021-01-20 20:11:59")
# Casting para fecha más hora.
mdy_hm("01/20/2021 08:01")
as_date(now())
now()
# Crear marcos (Tablas) en R.
# Para ello utilizamos el comando data.frame(Nombre de la columna = Vector de un tipo de dato) Un marco, puede contener diferentes datos.
data.frame(x = c(1, 2, 3), y = c("a", "b", "c"))
Tabla = data.frame(x = c(1, 2, 3), y = c("a", "b", "c"))
print(Tabla)
typeof(Tabla)
# Crear una carpeta desde este IDE
dir.create("Documentaciones")
# Crear un archivo en blanco + extensión desde este IDE.
file.create("Textos.txt")
file.create("Textos.docx")
file.create("Textos.csv")
file.create("Textos.csv")
# Copiar un archivo en una carpeta.
file.copy("Textos.txt", "Documentaciones")
# Eliminar un archivo desde el IDE de R
unlink("Textos.docx")
unlink("Textos.docx")
# Matrices.
matrix(c(3:8), nrow = 2)
# Se generó una matriz con 2 filas, donde cada cada fila mantendrá 3 valores iniciando con valores del 3 al 8
matrix(c(4:12), nrow = 2)
